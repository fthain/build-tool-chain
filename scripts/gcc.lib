##############################################
# Functions relating to gcc

function prep_gcc_core () {
    cd ${BTC_BUILD}
    local c
    c=${1/gcc/gcc-core}
    test -e $c && echo $c already exists && return
    test -e $1 && echo not overwriting $1 && return 1
    untar $c ftp://sourceware.org/pub/gcc/releases/$1 ftp://ftp.gnu.org/gnu/gcc/$1
    mv $1 $c
    cd $c

    # Debian m68k sources, etc
    if [ ${TARGET_CPU} = m68k ] ; then
      case ${1} in
      ( gcc-2.95.3 )
          decompress ${BTC_PATCHES}/gcc-core-2.95.4.ds15-27.diff | patch -p1
          ;;
      ( gcc-3.3.6 )
          decompress ${BTC_PATCHES}/gcc-core-3.3.6ds1-15.diff | patch -p1
          ;;
      ( gcc-4.1.1 )
          decompress ${BTC_PATCHES}/gcc-core-4.1.1ds2-21.diff | patch -p1
          ;;
      ( gcc-4.2.4 )
          decompress ${BTC_PATCHES}/gcc-core-4.2_4.2.4-6-debian.diff | patch -p1
          ;;
      ( gcc-4.4.1 )
          decompress ${BTC_PATCHES}/gcc-core-4.4_4.4.1-3-debian.diff | patch -p1
          patch -p1 < ${BTC_PATCHES}/gcc-m68k-support-for-tls-backport.patch
          ;;
      ( gcc-4.4.4 )
          decompress ${BTC_PATCHES}/gcc-core-4.4_4.4.4-2-debian.diff | patch -p1
          patch -p1 < ${BTC_PATCHES}/gcc-m68k-support-for-tls-backport.patch
          ;;
      esac
    else
      case ${1} in
      ( gcc-3.3[-.]* )
          # For binutils > 2.15
          patch -p0 < ${BTC_PATCHES}/gcc-3.3-mips-embedded-pic.patch
          ;;
      esac
    fi

    case ${1} in
    ( gcc-2.95.* )
        # Crosstool patches
        patch -p1 < ${BTC_PATCHES}/gcc-pr3106.patch
        patch -p1 < ${BTC_PATCHES}/backport-config.gcc-1.4.patch
        # More autotools fixes
        patch -p1 < ${BTC_PATCHES}/gcc-2.95.2-host-darwin.diff
        # makeinfo crash
        patch -p1 < ${BTC_PATCHES}/gcc-2.95.3-use-host-makeinfo.diff
        ;;
    ( gcc-3.[01][-.]* )
        ;;
    ( gcc-3.* )
        # We build gcc-core before libc is built
        patch -p0 < ${BTC_PATCHES}/gcc-3.2-btc-shlib-sans-libc.patch
        ;;
    ( gcc-4.0[-.]* )
        # We build gcc-core before libc is built
        patch -p1 < ${BTC_PATCHES}/gcc-4-no-libc-yet.diff
        # Bug fix
        #patch -p1 < ${BTC_PATCHES}/gcc-4.0-pr20583.patch
        ;;
    ( gcc-4.[123][.-]* | gcc-4.4.[012] )
        # We build gcc-core before libc is built
        patch -p1 < ${BTC_PATCHES}/gcc-4-no-libc-yet.diff
        ;;
    ( gcc-4.* )
        # We build gcc-core before libc is built
        patch -p1 < ${BTC_PATCHES}/gcc-4.4.3-no-libc-yet.diff
        ;;
    esac

    case ${1} in
    ( gcc-[23].* | gcc-4.0[-.]* )
        # build failure
        patch -p1 < ${BTC_PATCHES}/gcc-3-creat-needs-open3.patch
        ;;
    esac
}

function prep_gcc () {
    cd ${BTC_BUILD}
    test -e $1 && echo $1 already exists && return
    untar $1 ftp://sourceware.org/pub/gcc/releases/$1 ftp://ftp.gnu.org/gnu/gcc/$1
    cd $1

    # Debian m68k sources, etc
    if [ ${TARGET_CPU} = m68k ] ; then
      case ${1} in
      ( gcc-2.95.3 )
          decompress ${BTC_PATCHES}/gcc-2.95.4.ds15-27.diff | patch -p1
          ;;
      ( gcc-3.3.6 )
          decompress ${BTC_PATCHES}/gcc-3.3.6ds1-15.diff | patch -p1
          ;;
      ( gcc-4.1.1 )
          decompress ${BTC_PATCHES}/gcc-4.1.1ds2-21.diff | patch -p1
          ;;
      ( gcc-4.2.4 )
          decompress ${BTC_PATCHES}/gcc-4.2_4.2.4-6-debian.diff | patch -p1
          ;;
      ( gcc-4.4.1 )
          decompress ${BTC_PATCHES}/gcc-4.4_4.4.1-3-debian.diff | patch -p1
          patch -p1 < ${BTC_PATCHES}/gcc-m68k-support-for-tls-backport.patch
          ;;
      ( gcc-4.4.4 )
          decompress ${BTC_PATCHES}/gcc-4.4_4.4.4-2-debian.diff | patch -p1
          patch -p1 < ${BTC_PATCHES}/gcc-m68k-support-for-tls-backport.patch
          ;;
      esac
    else
      case ${1} in
      ( gcc-3.3[-.]* )
          # For binutils > 2.15
          patch -p0 < ${BTC_PATCHES}/gcc-3.3-mips-embedded-pic.patch
          ;;
      esac
    fi

    case ${1} in
    ( gcc-2.95.* )
        # Crosstool patches
        patch -p1 < ${BTC_PATCHES}/gcc-pr3106.patch
        patch -p1 < ${BTC_PATCHES}/backport-config.gcc-1.4.patch
        # More autotools fixes
        patch -p1 < ${BTC_PATCHES}/gcc-2.95.2-host-darwin.diff
        # makeinfo crash
        patch -p1 < ${BTC_PATCHES}/gcc-2.95.3-use-host-makeinfo.diff
        ;;
    ( gcc-3.3[-.]* )
        patch -p1 < ${BTC_PATCHES}/gcc-3.3.4-zecke-xgcc-cpp.patch
        ;;
    ( gcc-3.4[-.]* )
        patch -p1 < ${BTC_PATCHES}/gcc-3.4.1-btc-use-target-cpp-for-lib-configure.patch
        #patch -p1 < ${BTC_PATCHES}/gcc-3.4.4-zecke-xgcc-cpp.patch
        ;;
    ( gcc-4.0[-.]* )
        patch -p1 < ${BTC_PATCHES}/gcc-4.0.2-zecke-xgcc-cpp.patch
        ;;
    ( gcc-4.[123][-.]* )
        patch -p1 < ${BTC_PATCHES}/gcc-4.1.1-zecke-xgcc-cpp.patch
        ;;
    ( gcc-4.* )
        patch -p1 < ${BTC_PATCHES}/gcc-4.4.1-btc-use-target-cpp-for-lib-configure.patch
        ;;
    esac

    case ${1} in
    ( gcc-[23].* | gcc-4.0[-.]* )
        # build failure
        patch -p1 < ${BTC_PATCHES}/gcc-3-creat-needs-open3.patch
        ;;
    esac
}

function install_gcc_core_static () {
    cd ${BTC_BUILD}
    test -e $1 && echo $1 already exists && return
    mkdir $1
    cd $1

    local ldflags
    ldflags=
    if [ ${BUILD} = ${BUILD%-apple-darwin*} ] ; then
        ldflags="-Wl,-rpath,${HOST_TOOLS_PREFIX}/lib"
    fi

    CFLAGS="-O2 $HOST_CFLAGS" LDFLAGS="$ldflags" \
    ../${GCC_DIST/gcc/gcc-core}/configure \
    --prefix=${TC_PREFIX} --target=${TARGET} \
    ${GCC_CONFIG_OPTS} \
    --with-newlib \
    --disable-multilib \
    --disable-nls \
    --enable-threads=posix \
    --enable-symvers=gnu \
    --enable-languages=c \
    --disable-shared \
    --disable-libunwind-exceptions \
    --disable-libmudflap --disable-libssp --disable-decimal-float --disable-libgomp 

    make ${MAKE_OPTS} all-gcc
    make install-gcc 
    case ${GCC_DIST} in
    ( gcc-[23].* | gcc-4.[012][.-]* )
        ;;
    ( * )
        make all-target-libgcc
        make install-target-libgcc 
        ;;
    esac

    manifest install_gcc_core_static
}

function install_gcc_core_shared () {
    cd ${BTC_BUILD}
    test -e $1 && echo $1 already exists && return
    mkdir $1
    cd $1

    local ldflags
    ldflags=
    if [ ${BUILD} = ${BUILD%-apple-darwin*} ] ; then
        ldflags="-Wl,-rpath,${HOST_TOOLS_PREFIX}/lib"
    fi

    CFLAGS="-O2 $HOST_CFLAGS" LDFLAGS="$ldflags" \
    ../${GCC_DIST/gcc/gcc-core}/configure \
    --prefix=${TC_PREFIX} --target=${TARGET} \
    ${GCC_CONFIG_OPTS} \
    --with-newlib \
    --disable-multilib \
    --disable-nls \
    --enable-threads=posix \
    --enable-symvers=gnu \
    --enable-languages=c \
    --enable-shared \
    --disable-libmudflap --disable-libssp --disable-decimal-float --disable-libgomp 

    mkdir -p gcc
    cp ../glibc-${TARGET}-2/csu/crt[1in].o gcc
    make ${MAKE_OPTS} all-gcc
    make install-gcc 
    case ${GCC_DIST} in
    ( gcc-[23].* | gcc-4.[012][.-]* )
        ;;
    ( * )
        make all-target-libgcc
        make install-target-libgcc 
        ;;
    esac

    manifest install_gcc_core_shared
}

function install_gcc () {
    cd ${BTC_BUILD}
    test -e $1 && echo $1 already exists && return
    mkdir $1
    cd $1

    local ldflags
    ldflags=
    if [ ${BUILD} = ${BUILD%-apple-darwin*} ] ; then
        ldflags="-Wl,-rpath,${HOST_TOOLS_PREFIX}/lib"
    fi

    CFLAGS="-O2 $HOST_CFLAGS" LDFLAGS="$ldflags" \
    ../${GCC_DIST}/configure \
    --prefix=${TC_PREFIX} --target=${TARGET} \
    ${GCC_CONFIG_OPTS} \
    --enable-threads=posix \
    --enable-symvers=gnu \
    --enable-__cxa_atexit \
    --enable-languages=c,c++ \
    --enable-shared

    make all
    make install

    manifest install_gcc
}
