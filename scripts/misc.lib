##############################################
# Common functions

function fetch_stdout () {
   if type -t wget >/dev/null 2>&1 ; then
       wget -nv -O - "$1"
   elif type -t curl >/dev/null 2>&1 ; then
       curl -fSs "$1"
   fi
}

function fetch () {
   local f
   f=$1
   shift
   declare -a dir_urls
   if test -z "${BTC_MIRRORS:-}" ; then
       dir_urls=("$@")
   else
       dir_urls=($BTC_MIRRORS "$@")
   fi
   declare -a urls
   for u in "${dir_urls[@]}" ; do
       if test -z "${urls[*]:-}" ; then
           urls=("$u/$f.tar.bz2" "$u/$f.tar.gz")
       else
           urls=("${urls[@]}" "$u/$f.tar.bz2" "$u/$f.tar.gz")
       fi
   done
   (
       cd $BTC_SOURCES
       for u in "${urls[@]}" ; do
           echo fetch: trying $u 1>&2
           if type -t wget >/dev/null 2>&1 ; then
               wget -nv "$u" && return
               continue
           elif type -t curl >/dev/null 2>&1 ; then
               curl -fSsO "$u" && return
               rm -f "$f"
               continue
           fi
       done
       echo fetch: failed to download $f 1>&2
       return 1
   )
}

function untar () {
    echo untar $1 1>&2
    local f
    while true; do
        for f in $BTC_SOURCES/$1*; do
            case $f in
            ( $BTC_SOURCES/$1.tar.bz2 )
                tar -xjf $f
                return
                ;;
            ( $BTC_SOURCES/$1.tar.gz )
                tar -xzf $f
                return
                ;;
            ( $BTC_SOURCES/$1.tar )
                tar -xf $f
                return
                ;;
            ( * )
                fetch "$@"
                ;;
            esac
        done
    done
}

function decompress () {
    echo decompress $1 1>&2
    local f
    for f in $1*; do
        case $f in
        ( $1.bz2 )
            bzip2 -dc $f && return
            ;;
        ( $1.gz )
            gzip -dc $f && return
            ;;
        esac
    done
    echo decompress: failed: $1 1>&2
    # set -o pipefail isn't always available, so send garbage to patch on failure.
    echo garbage
    return 1
}

function manifest () {
    ( cd ${TC_PREFIX} && find . | sort | bzip2 -c > ${LOGS_DIR}/${1}.list.bz2 )
}

function log () {
    echo "$@"
    "$@" >> ${LOGS_DIR}/${1}.log 2>&1
    return
}
