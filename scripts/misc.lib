##############################################
#
# Common functions

function fetch_stdout () {
    (
        umask 0333
        if type -t wget >/dev/null 2>&1 ; then
            wget -nv -O - "$1"
        elif type -t curl >/dev/null 2>&1 ; then
            curl -fSs "$1"
        fi
    )
}

function fetch () {
    local dist
    dist=$1
    shift
    declare -a dir_urls
    if test -z "${BTC_MIRRORS:-}" ; then
        dir_urls=("$@")
    else
        dir_urls=($BTC_MIRRORS "$@")
    fi
    declare -a urls
    for u in "${dir_urls[@]}" ; do
        if test -z "${urls[*]:-}" ; then
            urls=("$u/$dist.tar.bz2" "$u/$dist.tar.gz")
        else
            urls=("${urls[@]}" "$u/$dist.tar.bz2" "$u/$dist.tar.gz")
        fi
    done
    (
        cd $BTC_SOURCES
        umask 0333
        for u in "${urls[@]}" ; do
            echo fetch: trying $u 1>&2
            if type -t wget >/dev/null 2>&1 ; then
                wget -nv "$u" && return
                continue
            elif type -t curl >/dev/null 2>&1 ; then
                curl -fSsO "$u" && return
                rm -f "$dist"
                continue
            fi
        done
        echo fetch: failed to download $dist 1>&2
        return 1
    )
}

function untar () {
    local globbed
    for globbed in $BTC_SOURCES/$1*; do
        case $globbed in
        ( $BTC_SOURCES/$1.tar.bz2 )
            echo untar $globbed 1>&2
            tar -xjf $globbed
            ;;
        ( $BTC_SOURCES/$1.tar.gz )
            echo untar $globbed 1>&2
            tar -xzf $globbed
            ;;
        ( $BTC_SOURCES/$1.tar )
            echo untar $globbed 1>&2
            tar -xf $globbed
            ;;
        ( * )
            if [ "$*" != "$1" ] ; then
                fetch "$@"
                untar $1
            else
                return 1
            fi
            ;;
        esac
    done
}

function decompress () {
    echo decompress $1 1>&2
    local globbed
    for globbed in $1*; do
        case $globbed in
        ( $1.bz2 )
            bzip2 -dc $globbed && return
            ;;
        ( $1.gz )
            gzip -dc $globbed && return
            ;;
        esac
    done
    echo decompress: failed: $1 1>&2
    # set -o pipefail isn't always available, so send garbage to patch on failure.
    echo garbage
    return 1
}

function manifest () {
    ( cd ${TC_PREFIX} && find . | sort | bzip2 -c > ${BTC_LOGS}/${1}.list.bz2 )
}

function log () {
    mkdir -p ${BTC_LOGS}
    echo "$@"
    "$@" >> ${BTC_LOGS}/${1}.log 2>&1
    return
}
