#!/bin/bash

# Scripts for building cross-toolchains targeting Linux, hosted on Linux or Mac OS X.
# Copyright (c) 2004-2014 Finn Thain
# fthain@telegraphics.com.au

set -o pipefail 2>/dev/null
set -e -u

##############################################
#
# Definitions for adjustment

# This is to be set to the location of the unpacked tarball or work area
BTC_DIST=${HOME}/btc

# Where to find sources etc.
BTC_SOURCES=${HOME}/btc-sources

# This is where the tool-chain will be installed
#BTC_PRODUCE=/opt/btc-13
BTC_PRODUCE=/Volumes/btc-13

# Missing host tools needed for the build are to be installed here
HOST_TOOLS_PREFIX=${BTC_PRODUCE}/host_tools

# Logs will be left here
BTC_LOGS=${BTC_LOGS:-${BTC_PRODUCE}/logs}

# Scratch area
BTC_BUILD=${BTC_PRODUCE}/build

# Options for make
MAKE_OPTS=-j2

# Optional URL prefix for source tar file cache
BTC_MIRRORS=

##############################################
#
# Define internal functions and variables

for f in ${BTC_DIST}/scripts/*.lib; do . $f; done

BTC_CONFIGS=${BTC_DIST}/configs
BTC_PATCHES=${BTC_DIST}/patches
BTC_PROFILES=${BTC_DIST}/profiles

##############################################
#
# Profile definitions

# Source the profile
if [ "${1:-}" == "-p" -a "${2:-}" != "" ]; then
    . ${BTC_PROFILES}/${2}
    profile_tag=${2%%-*}
    shift 2
else
    echo usage: $0 '-p <profile> [ -c command ]'
    exit 1
fi

# Profile must set these
TARGET=${TARGET}
METHOD=${METHOD}

# Profile may set these
DEFAULT_CPU=${DEFAULT_CPU:-}
LINUX_ARCH=${LINUX_ARCH:-${TARGET%%-*}}
UCLIBC_ARCH=${UCLIBC_ARCH:-${TARGET%%-*}}

# Tool chain prefix
TC_PREFIX=${BTC_PRODUCE}/gcc-${profile_tag}

mkdir -p ${TC_PREFIX}/${TARGET} ${BTC_BUILD} ${HOST_TOOLS_PREFIX}/bin

# The filesystem must be case-sensitive.
rm -f {${BTC_BUILD},${TC_PREFIX}}/{a,A}
touch {${BTC_BUILD},${TC_PREFIX}}/{a,A}
rm -f {${BTC_BUILD},${TC_PREFIX}}/A
if [ -e ${BTC_BUILD}/a -a -e ${TC_PREFIX}/a ]; then
    rm -f {${BTC_BUILD},${TC_PREFIX}}/a
else
    echo BTC_BUILD or TC_PREFIX is case-insensitive.
    exit 1
fi

export PATH=${TC_PREFIX}/bin:${HOST_TOOLS_PREFIX}/bin:/bin:/sbin:/usr/bin:/usr/sbin
if [ "${MANPATH:+set}" = set ] ; then
    export MANPATH=${MANPATH}:${TC_PREFIX}/share/man:${HOST_TOOLS_PREFIX}/share/man
fi
export INFOPATH=${INFOPATH:-}${INFOPATH:+:}${TC_PREFIX}/share/info:${HOST_TOOLS_PREFIX}/share/info

##############################################
#
# Set up build environment according to profile
#
# $METHOD controls how kernel headers and binaries are made, also how gcc gets
# patched & built, since NPTL => shared gcc => early build of glibc crt
# objects. Some versions of glibc need the NPTL method even for linuxthreads.
# Also, older tools don't support sysroot, so they need the old method.

case ${METHOD} in
A )
    SYSROOT=
    BINUTILS_CONFIG_OPTS=
    LIBC_PREFIX=${TC_PREFIX}/${TARGET}/libc
    LIBC_INSTALL_ROOT=/
    LIBC_HEADERS=${LIBC_PREFIX}/include
    glibc_enable_add_ons=linuxthreads
    GLIBC_CONFIG_OPTS=""
    GCC_CONFIG_OPTS="--with-local-prefix=${TC_PREFIX}/${TARGET}/local --with-headers=${LIBC_HEADERS}"
    GLIBC_NEEDS_SHARED_GCC=no
    ln -nsf libc/{lib,include} ${TC_PREFIX}/${TARGET}
    ;;
B )
    SYSROOT=${TC_PREFIX}/${TARGET}/sysroot
    BINUTILS_CONFIG_OPTS="--with-sysroot=${SYSROOT}"
    LIBC_PREFIX=/usr
    LIBC_INSTALL_ROOT=${SYSROOT}
    LIBC_HEADERS=${SYSROOT}/usr/include
    glibc_enable_add_ons=linuxthreads
    GLIBC_CONFIG_OPTS=
    GCC_CONFIG_OPTS="--with-sysroot=${SYSROOT}"
    GLIBC_NEEDS_SHARED_GCC=no
    ;;
* )
    SYSROOT=${TC_PREFIX}/${TARGET}/sysroot
    BINUTILS_CONFIG_OPTS="--with-sysroot=${SYSROOT}"
    LIBC_PREFIX=/usr
    LIBC_INSTALL_ROOT=${SYSROOT}
    LIBC_HEADERS=${SYSROOT}/usr/include
    case ${METHOD}-${TARGET} in
    C-m68k-* | C-mipsel-* | C-mips-* )
        glibc_enable_add_ons=linuxthreads
        GLIBC_CONFIG_OPTS=
        GLIBC_NEEDS_SHARED_GCC=yes
        ;;
    U-* )
        ;;
    [DE]-* )
        glibc_enable_add_ons=nptl
        GLIBC_CONFIG_OPTS="--with-tls --enable-bind-now --with-__thread"
        GLIBC_NEEDS_SHARED_GCC=yes
        ;;
    * )
        # ports add-on got removed in 2.20 and nptl add-on became mandatory
        glibc_enable_add_ons=no
        GLIBC_CONFIG_OPTS="--with-tls --enable-bind-now --with-__thread"
        GLIBC_NEEDS_SHARED_GCC=yes
        ;;
    esac
    GCC_CONFIG_OPTS="--with-sysroot=${SYSROOT} --enable-altivec"
    ;;
esac

case ${METHOD} in
U )
    ;;
[ABCDE] )
    for add_on in ${GLIBC_ADD_ONS}; do
        # GLIBC_ADD_ONS will be unpacked, but only --enabled-add-ons will be used.
        if [ $add_on != nptl -a $add_on != linuxthreads ] ; then
            glibc_enable_add_ons="${add_on},${glibc_enable_add_ons}"
        fi
    done
    GLIBC_CONFIG_OPTS="${GLIBC_CONFIG_OPTS} --enable-add-ons=${glibc_enable_add_ons}"
    ;;
* )
    GLIBC_CONFIG_OPTS="${GLIBC_CONFIG_OPTS} --enable-add-ons=${glibc_enable_add_ons}"
    ;;
esac

GCC_CONFIG_OPTS="${GCC_CONFIG_OPTS} --infodir=${TC_PREFIX}/share/info --mandir=${TC_PREFIX}/share/man"

##############################################
#
# Non-profile definitions

PATH_TO_AM=$(/bin/ls -d /usr/share/automake-*/ | tail -n 1)

# The build and host machine tuples
BUILD=$(${PATH_TO_AM}/config.guess)

# Sometimes useful for tricking configure into cross compiling
if [ $(${PATH_TO_AM}/config.sub $TARGET) = ${BUILD} ] ; then
    BUILD=${BUILD}x
fi

unset CC CPP CXX CXXCPP CFLAGS CXXFLAGS LDFLAGS

HOST_CC=gcc
HOST_CXX=g++
HOST_CFLAGS=
HOST_CXXFLAGS=
HOST_LDFLAGS=

if [ ${BUILD} != ${BUILD%-apple-darwin*} ] ; then
    # Possibly useful for tar, rsync and the like
    export COPYFILE_DISABLE=true
    export COPY_EXTENDED_ATTRIBUTES_DISABLE=true

    # Turn off Apple's pre-compiled headers (for Xcode 1 on Mac OS 10.3)
    #HOST_CC='gcc -no-cpp-precomp'

    # In theory setting CFLAGS should work but GCC passes those to xgcc!
    # So CC is used instead

    # Build backward compatible binaries
    # This also avoids some build failures
    export MACOSX_DEPLOYMENT_TARGET=10.4

    # GCC 4.0 from Xcode 3.2 can cross-compile fat binaries ... in theory
    # In practice, -E can't be used with multiple -arch flags
    HOST_CC='gcc-4.0 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386'
    HOST_CXX='g++-4.0 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386'
    HOST_LDFLAGS=-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk
fi

export CC="$HOST_CC"
export CPP="$HOST_CC -E $HOST_CFLAGS"
export CXX="$HOST_CXX"
export CXXCPP="$HOST_CXX -E $HOST_CXXFLAGS"

export LANGUAGE=C LANG=C LC_ALL=C

# Mac OS X defaults to 256 max open files but more are needed to build glibc
ulimit -n 1024

##############################################
#
# Execute shell command

case "${1:-}" in
-c )
    export -f e fetch untar decompress prep_linux build_linux
    export BTC_PRODUCE HOST_TOOLS_PREFIX BTC_LOGS
    export BTC_BUILD BTC_SOURCES BTC_PATCHES BTC_CONFIGS BTC_MIRRORS
    export TC_PREFIX BUILD TARGET LINUX_ARCH
    cd $BTC_BUILD
    exec bash -c "$2"
    exit 1
    ;;
-x )
    echo "export PATH=\$PATH:$TC_PREFIX/bin"
    echo "export TARGET=$TARGET"
    echo "export LINUX_ARCH=$LINUX_ARCH"
    exit 0
    ;;
'' )
    ;;
* )
    echo usage: $0 '-p <profile> [ -c command ]'
    exit 1
    ;;
esac

##############################################
#
# Install host tools

if [ ${BUILD} != ${BUILD%-apple-darwin*} ] ; then
    log install_sed       sed-4.2.2
fi
log install_make      make-3.81
if [ ${BUILD} != ${BUILD%-apple-darwin*} ] ; then
    log install_gettext   gettext-0.16.1
    log install_coreutils coreutils-8.5
    log install_loadkeys  kbd-1.12
    log install_find_pl   find.pl
fi
log install_gawk      gawk-3.1.8
log install_bison     bison-1.28
log install_flex      flex-2.5.4a 
case ${GCC_DIST#*-} in
2.* | 3.* | 4.[0-2][.-]* )
    # Prior to gcc-4.3, only Fortran needs GMP and MPFR
    ;;
4.* | 5.* | 6.* )
    log install_gmp       gmp-4.3.2
    log install_mpfr      mpfr-3.1.2
    GCC_CONFIG_OPTS="${GCC_CONFIG_OPTS} --with-gmp=${HOST_TOOLS_PREFIX} --with-mpfr=${HOST_TOOLS_PREFIX}"
    case ${GCC_DIST#*-} in
    4.[3-4][.-]* )
        ;;
    4.* )
        log install_mpc mpc-1.0.2
        GCC_CONFIG_OPTS="${GCC_CONFIG_OPTS} --with-mpc=${HOST_TOOLS_PREFIX}"
        ;;
    esac
    ;;
* )
    echo unknown gcc release
    exit 1
    ;;
esac
log install_depmod depmod.pl-1_20_stable
# log install_rsh_redone rsh-redone_85 # binaries must be suid root

##############################################
#
# Make sure nothing uses the host cpp when cross-compiling

# ln -nsf /bin/false ${HOST_TOOLS_PREFIX}/bin/cpp

##############################################
#
# Build and install binutils

log prep_binutils ${BINUTILS_DIST}
log build_binutils binutils-${TARGET}

# When restarting a build, you needn't remove the binutils build directory
# if it built okay. Just remove all the other build directories and the
# $TC_PREFIX directory. Then binutils will just reinstall. (This works
# because binutils has no deps in $TC_PREFIX).

log install_binutils binutils-${TARGET}

##############################################
#
# elf2flt

case ${TARGET}- in
*-uclinux-* )
    log prep_elf2flt ${ELF2FLT_DIST}
    log install_elf2flt elf2flt-${TARGET}
    ;;
esac

##############################################
#
# Install kernel headers

log prep_linux ${LINUX_DIST}
log install_linux_headers ${LINUX_DIST}

##############################################
#
# libc pass 1: install the headers

case ${TARGET}- in
*-uclinux-* )
    log prep_uclibc ${UCLIBC_DIST}
    log install_uclibc_headers ${UCLIBC_DIST}
    ;;
* )
    log prep_glibc ${GLIBC_DIST}
    log install_glibc_headers glibc-${TARGET}-1
    ;;
esac

##############################################
#
# gcc-core pass 1: static compiler

log prep_gcc_core ${GCC_DIST}
log install_gcc_core_static gcc-${TARGET}-1

##############################################
#
# libc: build
#

case ${TARGET}- in
*-uclinux-* )
    log make_uclibc_runtime ${UCLIBC_DIST}
    log install_gcc_core_shared gcc-${TARGET}-2
    log install_uclibc ${UCLIBC_DIST}
    ;;

* )
    # (omitted unless using NPTL in glibc pass 3)
    # glibc pass 2: csu/subdir_lib for crt[1in].o
    # gcc-core pass 2: first non-static compiler;
    # build and install the required libgcc_s.so and libgcc_eh.a

    if [ "x${GLIBC_NEEDS_SHARED_GCC}" = xyes ]; then
        log make_glibc_runtime glibc-${TARGET}-2
        log install_gcc_core_shared gcc-${TARGET}-2
    fi
    log install_glibc glibc-${TARGET}-3
    ;;
esac

##############################################
#
# GCC: final build and install

log prep_gcc ${GCC_DIST}
log install_gcc gcc-${TARGET}-3

##############################################
#
# gdb: build and install

if [ ${GDB_DIST:-none} != none ] ; then
    log prep_gdb ${GDB_DIST}
    log install_gdb gdb-${TARGET}
fi

##############################################
#
# Test the compiler

log build_linux ${LINUX_DIST}

##############################################
