Build Tool Chain scripts
http://www.telegraphics.com.au/~fthain/sw/build-tool-chain
(c) 2004-2009 Finn Thain


PURPOSE

These scripts (collectively called "btc") are designed for experimenting with
new releases of GNU tools, for building cross-toolchains and for cross-
compiling the Linux kernel.

They differ from other similar scripts in that they work under both Mac OS X
and Linux, and target current glibc-based systems (rather than uCLinux etc).
Development of BTC began before crosstool supported Mac OS X or NPTL.

The tool-chain build includes glibc (with NPTL or linuxthreads) and supports
cross-compilation of packages using shared libraries. You can also chroot your
target machine into the tool-chain sysroot for testing, or export the sysroot
as an NFS root filesystem.

If you need to cross-build an entire glibc-based system, you may want to
check out Cross Linux From Scratch (CLFS). Another option for building the
tool-chain is crosstool (and its successors).


NOTA BENE

The resulting tools are not expected to be bug free. If you want more
confidence in the results, you may wish to use mature package sources
maintained by the various Linux distros.

This script applies numerous patches to hack around build issues. Use these
patches at your peril.

As with any cross compiler, test suites can't be run easily and no stage 2 or
stage 3 gcc is built. Bootstrapping gcc natively on the target may improve
your chances of getting correct results. The same applies to glibc. According
to the glibc documentation, you should build glibc under the latest glibc (!)

If you are building certain Linux kernels, do not enable symbol versioning
(CONFIG_MODVERSIONS) or you may end up with modules that cannot be loaded,
since genksyms for the target is not generally available at build time.


INSTRUCTIONS (no substitute for reading the scripts)

- Untar the BTC distribution (as appropriate). If using Mac OS X, you'll need
  a case-sensitive filesystem (a disk image is convenient).

- Edit the build-tool-chain.bash script as follows:

  + Modify the $DIST_ROOT definition to be the absolute pathname of the
    untarred btc directory or its mountpoint. This needs to be a filesystem
    with plenty of free space (around 4 GB to build recent tools).

  + Change MAKEOPTS if you want to adjust the make parallelism option.

  + Change BTC_MIRROR if you want to download sources from a local cache.
    The necessary source distributions will be downloaded into the $SOURCES
    directory as needed.

  + Create an appropriate profile for your target system or choose one
    of the provided ones. The profile is sourced by build-tool-chain.bash
    in order to define variables that specify what to build and how to do so.
    In particular, the profile will define TARGET, TARGET_CPU, the build
    METHOD, and the package versions in the variables BINUTILS_DIST, GCC_DIST,
    GLIBC_DIST, GLIBC_ADD_ONS, GDB_DIST and KERNEL.

- Any given GNU system will probably be missing some tools. To build the older
  gcc you will need autoconf-2.13. Also, texinfo and ncurses-dev are generally
  required on Debian-like systems. Gentoo systems do not generally need extra
  tools installed other than the old bison and flex, so the script provides
  those for its use. Some Linux systems use mawk so gawk is provided too. GMP
  and MPFR are required by gcc-4.3 and later. PPL and CLOOG are required by
  gcc-4.4 and later. A recent m4 is needed in turn by those tools.

  The old bison is needed to build gcc-2.95. flex is for binutils-2.12. loadkeys
  (from kbd) is used for v2.2 kernel keymaps.

  The GNU compiler and libc are not very portable in that they require GNU
  versions of awk, sed, make, gettext and one or two other commands. These are
  built and added to the search path before the host's versions.

- If you wish, provide a kernel configuration in the $CONFIGS directory. Name
  it something like linux-2.4.27-powerpc-dot-config and it will be used in
  building that particular kernel release.

- Run build-tool-chain.bash, as a non-privileged user, as follows (where
  PROFILE is your choice of toolchain, e.g. 336-m68k).

scripts/build-tool-chain.bash -p PROFILE

- You can remove the $BUILD_DIR and $LOGS_DIR directories (not the compilers)
  like this:

scripts/build-tool-chain.bash -d

- If you then want to build a tool-chain for a new architecture, for example,
  use the same script:

scripts/build-tool-chain.bash -p ANOTHER_PROFILE

  The new tool-chain will be created under its own $TC_PREFIX.

- If you want to unpack the kernel source and build it using one of the
  compilers that you've compiled, you could do that as follows.

scripts/build-tool-chain.bash -p PROFILE -S # set environment and spawn shell
prep_kernel linux-2.6.22
cd ..
build_kernel linux-2.6.22
package_kernel linux-2.6.22
exit

  Alternatively, to simply use a cross-compiler, just set your PATH variable to
  something like the value used by build-tool-chain.bash script itself:

scripts/build-tool-chain.bash -p PROFILE -s
echo $PATH
exit


RELEASE NOTES

Version 0.11, November 2009

Aside from the provided profiles, the following combinations have been tested
(though not on all platforms):

alpha   m68k    ppc  binutils        gcc              glibc             kernel
  | i686 |  mips |      |             |                |                  |
--+--+---+---+---+------+-------------+----------------+------------------+---

     X   X       X  *2.12.90.0.1-4  *2.95.4.ds15-24  *2.2.5-11.8         2.2

 X   X   X   X   X   2.18.50.0.1    *3.3.6ds1-15     *2.3.2ds1-22sarge6  2.4

 X   X   X   X   X   2.18.50.0.1     3.4.6           *2.3.6-ds1-13       2.6
 X   X   X   X   X   2.18.50.0.1     4.0.4           *2.3.6-ds1-13       2.6
 X   X   X   X   X   2.18.50.0.1    *4.1.1ds2-21     *2.3.6-ds1-13       2.6

* Debian sources.

m68k kernel sources are the linux-m68k CVS (2.4, 2.6) & linux-mac68k CVS (2.2)

ARCH = powerpc (not ppc) for kernels >= 2.6.16


ACKNOWLEDGEMENTS

Inspired by Philippe Trottier's Xcompiler V0.93. Ryan Oliver provided
encouragement and crucial assistance with the build method, as well as patches
for glibc. Some ideas come from Dan Kegel's crosstool and other scripts
elsewhere on the 'net. Martin Schaffner contributed some changes to the kernel
make commands. My gratitude goes to the Gentoo, LFS and Debian projects and
the many mailing list denizens who have provided patches that make this stuff
actually work.
