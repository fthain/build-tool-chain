From libc-alpha-return-15433-listarch-libc-alpha=sources dot redhat dot com at sources dot redhat dot com Wed May 12 16:24:07 2004
Return-Path: <libc-alpha-return-15433-listarch-libc-alpha=sources dot redhat dot com at sources dot redhat dot com>
Delivered-To: listarch-libc-alpha at sources dot redhat dot com
Received: (qmail 18176 invoked by alias); 12 May 2004 16:24:07 -0000
Mailing-List: contact libc-alpha-help at sources dot redhat dot com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:libc-alpha-subscribe at sources dot redhat dot com>
List-Archive: <http://sources.redhat.com/ml/libc-alpha/>
List-Post: <mailto:libc-alpha at sources dot redhat dot com>
List-Help: <mailto:libc-alpha-help at sources dot redhat dot com>, <http://sources dot redhat dot com/ml/#faqs>
Sender: libc-alpha-owner at sources dot redhat dot com
Delivered-To: mailing list libc-alpha at sources dot redhat dot com
Received: (qmail 18169 invoked from network); 12 May 2004 16:24:05 -0000
Received: from unknown (HELO webmasters.gr.jp) (218.44.239.78)
  by sourceware dot org with SMTP; 12 May 2004 16:24:05 -0000
Received: from omega.webmasters.gr.jp (localhost [127.0.0.1])
	by webmasters dot gr dot jp (Postfix) with ESMTP
	id D6043DEB58; Thu, 13 May 2004 01:24:03 +0900 (JST)
Date: Thu, 13 May 2004 01:24:03 +0900
Message-ID: <81vfj1zk9o.wl@omega.webmasters.gr.jp>
From: GOTO Masanori <gotom at debian dot or dot jp>
To: Richard Henderson <rth at twiddle dot net>
Cc: libc-alpha at sources dot redhat dot com, gotom at debian dot or dot jp
Subject: Fix alpha compilation failure
User-Agent: Wanderlust/2.9.9 (Unchained Melody) SEMI/1.14.3 (Ushinoya)
 FLIM/1 dot 14 dot 3 (=?ISO-8859-4?Q?Unebigory=F2mae?=) APEL/10 dot 3 Emacs/21 dot 2
 (i386-debian-linux-gnu) MULE/5 dot 0 (SAKAKI)
MIME-Version: 1.0 (generated by SEMI 1.14.3 - "Ushinoya")
Content-Type: text/plain; charset=US-ASCII

Hi,

The current cvs failed to compile on alpha with linux kernel < 2.6.4,
because old version did not have __NR_{fstat,lstat,stat}64.  This
patch checks such syscalls are actually defined.

Regards,
-- gotom


2004-05-13  GOTO Masanori  <gotom@debian.or.jp>

	* sysdeps/unix/sysv/linux/alpha/fxstat.c: Check define
	__NR_{fstat,lstat,stat}64 if not defined.
	* sysdeps/unix/sysv/linux/alpha/lxstat.c: Likewise.
	* sysdeps/unix/sysv/linux/alpha/xstat.c: Likewise.


Index: sysdeps/unix/sysv/linux/alpha/fxstat.c
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/unix/sysv/linux/alpha/fxstat.c,v
retrieving revision 1.1
diff -u -r1.1 fxstat.c
--- sysdeps/unix/sysv/linux/alpha/fxstat.c	11 Mar 2004 02:58:44 -0000	1.1
+++ sysdeps/unix/sysv/linux/alpha/fxstat.c	12 May 2004 16:17:08 -0000
@@ -35,27 +35,28 @@
 __fxstat (int vers, int fd, struct stat *buf)
 {
   INTERNAL_SYSCALL_DECL (err);
-  int result, errno_out;
+  int result;
   struct kernel_stat kbuf;
 
   if (vers == _STAT_VER_KERNEL64 && !__libc_missing_axp_stat64)
     {
+#ifdef __NR_fstat64
       result = INTERNAL_SYSCALL (fstat64, err, 2, fd, buf);
       if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
 	return result;
-      errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-      if (errno_out != ENOSYS)
-	goto fail;
+      result = INTERNAL_SYSCALL_ERRNO (result, err);
+      if (result != ENOSYS) {
+	__set_errno (result);
+	return -1;
+      }
+#endif
       __libc_missing_axp_stat64 = 1;
     }
 
   result = INTERNAL_SYSCALL (fstat, err, 2, fd, &kbuf);
   if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
     return __xstat_conv (vers, &kbuf, buf);
-  errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-  
- fail:
-  __set_errno (errno_out);
+  __set_errno (INTERNAL_SYSCALL_ERRNO (result, err));
   return -1;
 }
 hidden_def (__fxstat)
Index: sysdeps/unix/sysv/linux/alpha/lxstat.c
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/unix/sysv/linux/alpha/lxstat.c,v
retrieving revision 1.1
diff -u -r1.1 lxstat.c
--- sysdeps/unix/sysv/linux/alpha/lxstat.c	11 Mar 2004 02:58:44 -0000	1.1
+++ sysdeps/unix/sysv/linux/alpha/lxstat.c	12 May 2004 16:17:08 -0000
@@ -35,27 +35,28 @@
 __lxstat (int vers, const char *name, struct stat *buf)
 {
   INTERNAL_SYSCALL_DECL (err);
-  int result, errno_out;
+  int result;
   struct kernel_stat kbuf;
 
   if (vers == _STAT_VER_KERNEL64 && !__libc_missing_axp_stat64)
     {
+#ifdef __NR_lstat64
       result = INTERNAL_SYSCALL (lstat64, err, 2, name, buf);
       if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
 	return result;
-      errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-      if (errno_out != ENOSYS)
-	goto fail;
+      result = INTERNAL_SYSCALL_ERRNO (result, err);
+      if (result != ENOSYS) {
+	__set_errno (result);
+	return -1;
+      }
+#endif
       __libc_missing_axp_stat64 = 1;
     }
 
   result = INTERNAL_SYSCALL (lstat, err, 2, name, &kbuf);
   if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
     return __xstat_conv (vers, &kbuf, buf);
-  errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-  
- fail:
-  __set_errno (errno_out);
+  __set_errno (INTERNAL_SYSCALL_ERRNO (result, err));
   return -1;
 }
 hidden_def (__lxstat)
Index: sysdeps/unix/sysv/linux/alpha/xstat.c
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/unix/sysv/linux/alpha/xstat.c,v
retrieving revision 1.1
diff -u -r1.1 xstat.c
--- sysdeps/unix/sysv/linux/alpha/xstat.c	11 Mar 2004 02:58:44 -0000	1.1
+++ sysdeps/unix/sysv/linux/alpha/xstat.c	12 May 2004 16:17:08 -0000
@@ -35,27 +35,28 @@
 __xstat (int vers, const char *name, struct stat *buf)
 {
   INTERNAL_SYSCALL_DECL (err);
-  int result, errno_out;
+  int result;
   struct kernel_stat kbuf;
 
   if (vers == _STAT_VER_KERNEL64 && !__libc_missing_axp_stat64)
     {
+#ifdef __NR_stat64
       result = INTERNAL_SYSCALL (stat64, err, 2, name, buf);
       if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
 	return result;
-      errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-      if (errno_out != ENOSYS)
-	goto fail;
+      result = INTERNAL_SYSCALL_ERRNO (result, err);
+      if (result != ENOSYS) {
+	__set_errno (result);
+	return -1;
+      }
+#endif
       __libc_missing_axp_stat64 = 1;
     }
 
   result = INTERNAL_SYSCALL (stat, err, 2, name, &kbuf);
   if (__builtin_expect (!INTERNAL_SYSCALL_ERROR_P (result, err), 1))
     return __xstat_conv (vers, &kbuf, buf);
-  errno_out = INTERNAL_SYSCALL_ERRNO (result, err);
-  
- fail:
-  __set_errno (errno_out);
+  __set_errno (INTERNAL_SYSCALL_ERRNO (result, err));
   return -1;
 }
 hidden_def (__xstat)

